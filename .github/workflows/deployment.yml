name: Deploy AI Travel Planner

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to DockerHub
      - name: Log in to DockerHub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Build and push Backend image
      - name: Build and push Backend image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --push \
            --cache-from=type=registry,ref=${{ secrets.DOCKER_USERNAME }}/my-backend-image:latest \
            --cache-to=type=inline \
            --tag ${{ secrets.DOCKER_USERNAME }}/my-backend-image:latest \
            --tag ${{ secrets.DOCKER_USERNAME }}/my-backend-image:${{ github.sha }} \
            ./fast_api

      # Build and push Frontend image
      - name: Build and push Frontend image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --push \
            --cache-from=type=registry,ref=${{ secrets.DOCKER_USERNAME }}/my-frontend-image:latest \
            --cache-to=type=inline \
            --tag ${{ secrets.DOCKER_USERNAME }}/my-frontend-image:latest \
            --tag ${{ secrets.DOCKER_USERNAME }}/my-frontend-image:${{ github.sha }} \
            ./Streamlit

      # Create .env file for secrets
      - name: Create .env file
        run: |
          echo "FASTAPI_URL=${{ secrets.FASTAPI_URL }}" > .env
          echo "PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}" >> .env
          echo "PINECONE_INDEX_NAME=${{ secrets.PINECONE_INDEX_NAME }}" >> .env
          echo "PINECONE_ENVIRONMENT=${{ secrets.PINECONE_ENVIRONMENT }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          echo "YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}" >> .env
          echo "SNOWFLAKE_USER=${{ secrets.SNOWFLAKE_USER }}" >> .env
          echo "SNOWFLAKE_PASSWORD=${{ secrets.SNOWFLAKE_PASSWORD }}" >> .env
          echo "SNOWFLAKE_ACCOUNT=${{ secrets.SNOWFLAKE_ACCOUNT }}" >> .env
          echo "SNOWFLAKE_DATABASE=${{ secrets.SNOWFLAKE_DATABASE }}" >> .env
          echo "SNOWFLAKE_SCHEMA=${{ secrets.SNOWFLAKE_SCHEMA }}" >> .env
          echo "SNOWFLAKE_WAREHOUSE=${{ secrets.SNOWFLAKE_WAREHOUSE }}" >> .env
          echo "DIMENSION=${{ secrets.DIMENSION }}" >> .env
          echo "METRIC=${{ secrets.METRIC }}" >> .env
          echo "TAVILY_API_KEY=${{ secrets.TAVILY_API_KEY }}" >> .env

      # Copy .env file to EC2
      - name: Copy .env file to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: .env
          target: /home/ubuntu/

      # Copy docker-compose.yml to EC2
      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ./docker-compose.yml
          target: /home/ubuntu/

      # Deploy on EC2
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            cd /home/ubuntu/
            docker-compose down --volumes --remove-orphans
            docker network inspect my-network || docker network create my-network
            docker-compose pull
            docker-compose up -d --remove-orphans


      # Verify Backend Deployment
      - name: Check Backend service health
        run: |
          retries=10
          delay=10
          for i in $(seq 1 $retries); do
            echo "Checking Backend service health (attempt $i/$retries)..."
            curl -f http://${{ secrets.EC2_HOST }}:8000/docs && break || sleep $delay
          done

      # Verify Frontend Deployment
      - name: Check Frontend service health
        run: |
          retries=10
          delay=10
          for i in $(seq 1 $retries); do
            echo "Checking Frontend service health (attempt $i/$retries)..."
            curl -f http://${{ secrets.EC2_HOST }}:8501 && break || sleep $delay
          done
